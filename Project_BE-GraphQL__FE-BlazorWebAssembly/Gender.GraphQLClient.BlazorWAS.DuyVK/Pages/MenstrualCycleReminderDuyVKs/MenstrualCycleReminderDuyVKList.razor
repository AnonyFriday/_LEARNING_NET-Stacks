@page "/MenstrualCycleReminderDuyVKs/MenstrualCycleReminderDuyVKList"
@using Gender.GraphQLClient.BlazorWAS.DuyVK.ModelExtensions
@using Gender.GraphQLClient.BlazorWAS.DuyVK.Models
@using Microsoft.AspNetCore.Authorization

@* @attribute [Authorize(Roles = "1,2")] *@

@inject NavigationManager _navigationManager
@inject IJSRuntime JS

@if (reminders == null)
{
    <div>Page loading...</div>
}
else
{
    <button class="btn btn-sm btn-primary mb-3" @onclick="() => NavigateEditPage(null)">Add New Reminder</button>

    <div class="mb-3 d-flex gap-2 align-items-end flex-wrap">
        <div>
            <label class="form-label">Title</label>
            <input class="form-control" @bind="filterTitle" placeholder="Enter title" />
        </div>

        <div>
            <label class="form-label">Color Code</label>
            <input class="form-control" @bind="filterColorCode" type="text" placeholder="#FF0000" />
        </div>

        <div>
            <label class="form-label">Importance Score</label>
            <input class="form-control" type="number" step="0.01" @bind="filterImportanceScore" />
        </div>

        <div>
            <button class="btn btn-success mt-4" @onclick="ApplySearch">Search</button>
        </div>

        <div>
            <button class="btn btn-secondary mt-4" @onclick="ResetSearch">Reset</button>
        </div>
    </div>

    @* Table Of Content *@
    <table class="table table-striped table-bordered table-hover">
        <thead class="bg-primary text-white">
            <tr>
                <th>Reminder Id</th>
                <th>Category Id</th>
                <th>Title</th>
                <th>Note</th>
                <th>Reminder Date</th>
                <th>Sent At</th>
                <th>Is Sent</th>
                <th>Repeat Interval</th>
                <th>Importance</th>
                <th>Created</th>
                <th>Updated</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody class="table-primary">
            @foreach (var reminder in reminders.Items)
            {
                <tr>
                    <td>@reminder.MenstrualCycleReminderDuyVKid</td>
                    <td>@reminder.ReminderCategoryDuyVKid</td>
                    <td>@reminder.Title</td>
                    <td>@reminder.Note</td>
                    <td class="text-center fw-bold text-success">@reminder.ReminderDate.ToString("dd/MM/yyyy")</td>
                    <td>@(reminder.SentAt?.ToString("dd/MM/yyyy") ?? "-")</td>
                    <td>@(reminder.IsSent ? "Yes" : "No")</td>
                    <td>@reminder.RepeatInterval</td>
                    <td>@reminder.ImportanceScore</td>
                    <td>@reminder.CreatedAt?.ToString("dd/MM/yyyy")</td>
                    <td>@reminder.UpdatedAt?.ToString("dd/MM/yyyy")</td>
                    <td>
                        <div class="btn-group">
                            <button class="btn btn-sm btn-primary" @onclick="() => NavigateDetailPage(reminder.MenstrualCycleReminderDuyVKid)">Detail</button>
                            <button class="btn btn-sm btn-warning" @onclick="() => NavigateEditPage(reminder.MenstrualCycleReminderDuyVKid)">Edit</button>
                            <button class="btn btn-sm btn-danger" @onclick="() => ConfirmDelete(reminder.MenstrualCycleReminderDuyVKid)">Delete</button>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    @* Pagination *@
    @if (reminders.TotalPages > 1)
    {
        <div class="mt-3 d-flex justify-content-center align-items-center gap-3">
            <button class="btn btn-outline-secondary" @onclick="PrevPage" disabled="@IsFirstPage">Previous</button>
            <span>Page @CurrentPage of @reminders.TotalPages</span>
            <button class="btn btn-outline-secondary" @onclick="NextPage" disabled="@IsLastPage">Next</button>
        </div>
    }
}

@code {
    private PaginationResultResponse<List<MenstrualCycleReminderDuyVK>> reminders;
    private SearchMenstrualCycleReminderRequest searchRequest = new();

    private string filterTitle;
    private string filterColorCode;
    private double? filterImportanceScore;
    private bool isSearchMode = false;

    private int CurrentPage { get; set; } = 1;
    private int PageSize { get; set; } = 10;

    private bool IsFirstPage => CurrentPage <= 1;
    private bool IsLastPage => reminders != null && CurrentPage >= reminders.TotalPages;

    protected override async Task OnInitializedAsync()
    {
        await LoadReminders();
    }

    private async Task LoadReminders()
    {
        await Task.Delay(200);

        if (isSearchMode)
        {
            searchRequest.CurrentPage = CurrentPage;
            searchRequest.PageSize = PageSize;
            reminders = await _reminderGraphQLConsumer.SearchAsync(searchRequest);
        }
        else
        {
            reminders = await _reminderGraphQLConsumer.GetListAsync(new SearchRequest
            {
                CurrentPage = CurrentPage,
                PageSize = PageSize
            });
        }
    }

    private async Task ApplySearch()
    {
        CurrentPage = 1;
        isSearchMode = true;

        searchRequest = new SearchMenstrualCycleReminderRequest
        {
            Title = filterTitle,
            ColorCode = filterColorCode,
            ImportantScore = filterImportanceScore,
            CurrentPage = CurrentPage,
            PageSize = PageSize
        };

        await LoadReminders();
    }

    private async Task ResetSearch()
    {
        isSearchMode = false;
        filterTitle = string.Empty;
        filterColorCode = string.Empty;
        filterImportanceScore = null;
        searchRequest = new();
        CurrentPage = 1;
        PageSize = 10;
        await LoadReminders();
    }

    private async Task PrevPage()
    {
        if (!IsFirstPage)
        {
            CurrentPage--;
            await LoadReminders();
        }
    }

    private async Task NextPage()
    {
        if (!IsLastPage)
        {
            CurrentPage++;
            await LoadReminders();
        }
    }

    private async Task ConfirmDelete(int id)
    {
        if (await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete reminder #{id}?"))
        {
            if (await _reminderGraphQLConsumer.DeleteAsync(id))
                await LoadReminders();
        }
    }

    private void NavigateDetailPage(int id)
    {
        _navigationManager.NavigateTo($"/MenstrualCycleReminderDuyVKs/MenstrualCycleReminderDuyVKDetail/{id}");
    }

    private void NavigateEditPage(int? id)
    {
        _navigationManager.NavigateTo(id.HasValue
            ? $"/MenstrualCycleReminderDuyVKs/MenstrualCycleReminderDuyVKForm/{id.Value}"
            : "/MenstrualCycleReminderDuyVKs/MenstrualCycleReminderDuyVKForm");
    }
}
