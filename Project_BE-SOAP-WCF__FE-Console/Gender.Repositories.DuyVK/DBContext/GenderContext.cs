// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Gender.Repositories.DuyVK.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;

namespace Gender.Repositories.DuyVK.DBContext;

public partial class GenderContext : DbContext
{

    // ==========================
    // === Constructors
    // ==========================

    public GenderContext()
    {
    }

    public GenderContext(DbContextOptions<GenderContext> options)
        : base(options)
    {
    }

    // ==========================
    // === DbSets
    // ==========================

    public virtual DbSet<MenstrualCycleReminderDuyVK> MenstrualCycleReminderDuyVKs { get; set; }

    public virtual DbSet<ReminderCategoryDuyVK> ReminderCategoryDuyVKs { get; set; }

    public virtual DbSet<SystemUserAccount> SystemUserAccounts { get; set; }


    // ==========================
    // === Methods
    // ==========================

    public static string GetConnectionString(string connectionStringName)
    {
        var config = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("appsettings.json")
            .Build();

        string connectionString = config.GetConnectionString(connectionStringName);
        return connectionString;
    }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        // If configure at the Program.cs, then do not apply in here
        optionsBuilder
            .UseSqlServer(GetConnectionString("DefaultConnection"))
            .EnableSensitiveDataLogging()
            .LogTo(Console.WriteLine, LogLevel.Information) // logs SQL to console
            .UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);

    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<MenstrualCycleReminderDuyVK>(entity =>
        {
            entity.HasKey(e => e.MenstrualCycleReminderDuyVKid).HasName("PK__Menstrua__33EA2B3DB40189D7");

            entity.ToTable("MenstrualCycleReminderDuyVK");

            entity.Property(e => e.MenstrualCycleReminderDuyVKid).HasColumnName("MenstrualCycleReminderDuyVKID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ImportanceScore).HasDefaultValue(1.0);
            entity.Property(e => e.IsSent).HasDefaultValue(false);
            entity.Property(e => e.Note).HasColumnType("text");
            entity.Property(e => e.ReminderCategoryDuyVKid).HasColumnName("ReminderCategoryDuyVKID");
            entity.Property(e => e.ReminderDate).HasColumnType("datetime");
            entity.Property(e => e.SentAt).HasColumnType("datetime");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.ReminderCategoryDuyVK).WithMany(p => p.MenstrualCycleReminderDuyVKs)
                .HasForeignKey(d => d.ReminderCategoryDuyVKid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MenstrualCycleReminderDuyVK_ReminderCategoryDuyVK");
        });

        modelBuilder.Entity<ReminderCategoryDuyVK>(entity =>
        {
            entity.HasKey(e => e.ReminderCategoryDuyVKid).HasName("PK__Reminder__AA3CB68BA1B4E4A6");

            entity.ToTable("ReminderCategoryDuyVK");

            entity.HasIndex(e => e.Code, "UQ__Reminder__A25C5AA70D8A6327").IsUnique();

            entity.Property(e => e.ReminderCategoryDuyVKid).HasColumnName("ReminderCategoryDuyVKID");
            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ColorCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).HasColumnType("text");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PriorityLevel).HasDefaultValue(1);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<SystemUserAccount>(entity =>
        {
            entity.HasKey(e => e.UserAccountId);

            entity.ToTable("System.UserAccount");

            entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");
            entity.Property(e => e.ApplicationCode).HasMaxLength(50);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(150);
            entity.Property(e => e.EmployeeCode)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.RequestCode).HasMaxLength(50);
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(50);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}